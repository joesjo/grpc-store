// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.20.1
// source: inventory.proto

package protobuf

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// InventoryServiceClient is the client API for InventoryService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type InventoryServiceClient interface {
	GetInventory(ctx context.Context, in *Empty, opts ...grpc.CallOption) (InventoryService_GetInventoryClient, error)
	GetItem(ctx context.Context, in *GetItemRequest, opts ...grpc.CallOption) (*GetItemResponse, error)
	FindItems(ctx context.Context, in *FindItemsRequest, opts ...grpc.CallOption) (InventoryService_FindItemsClient, error)
	InsertItem(ctx context.Context, in *InsertItemRequest, opts ...grpc.CallOption) (*InsertItemResponse, error)
	UpdateItem(ctx context.Context, in *UpdateItemRequest, opts ...grpc.CallOption) (*UpdateItemResponse, error)
	DeleteItem(ctx context.Context, in *DeleteItemRequest, opts ...grpc.CallOption) (*DeleteItemResponse, error)
	IncrementItemQuantity(ctx context.Context, in *IncrementItemQuantityRequest, opts ...grpc.CallOption) (*IncrementItemQuantityResponse, error)
}

type inventoryServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewInventoryServiceClient(cc grpc.ClientConnInterface) InventoryServiceClient {
	return &inventoryServiceClient{cc}
}

func (c *inventoryServiceClient) GetInventory(ctx context.Context, in *Empty, opts ...grpc.CallOption) (InventoryService_GetInventoryClient, error) {
	stream, err := c.cc.NewStream(ctx, &InventoryService_ServiceDesc.Streams[0], "/protobuf.InventoryService/GetInventory", opts...)
	if err != nil {
		return nil, err
	}
	x := &inventoryServiceGetInventoryClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type InventoryService_GetInventoryClient interface {
	Recv() (*InventoryItem, error)
	grpc.ClientStream
}

type inventoryServiceGetInventoryClient struct {
	grpc.ClientStream
}

func (x *inventoryServiceGetInventoryClient) Recv() (*InventoryItem, error) {
	m := new(InventoryItem)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *inventoryServiceClient) GetItem(ctx context.Context, in *GetItemRequest, opts ...grpc.CallOption) (*GetItemResponse, error) {
	out := new(GetItemResponse)
	err := c.cc.Invoke(ctx, "/protobuf.InventoryService/GetItem", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inventoryServiceClient) FindItems(ctx context.Context, in *FindItemsRequest, opts ...grpc.CallOption) (InventoryService_FindItemsClient, error) {
	stream, err := c.cc.NewStream(ctx, &InventoryService_ServiceDesc.Streams[1], "/protobuf.InventoryService/FindItems", opts...)
	if err != nil {
		return nil, err
	}
	x := &inventoryServiceFindItemsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type InventoryService_FindItemsClient interface {
	Recv() (*InventoryItem, error)
	grpc.ClientStream
}

type inventoryServiceFindItemsClient struct {
	grpc.ClientStream
}

func (x *inventoryServiceFindItemsClient) Recv() (*InventoryItem, error) {
	m := new(InventoryItem)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *inventoryServiceClient) InsertItem(ctx context.Context, in *InsertItemRequest, opts ...grpc.CallOption) (*InsertItemResponse, error) {
	out := new(InsertItemResponse)
	err := c.cc.Invoke(ctx, "/protobuf.InventoryService/InsertItem", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inventoryServiceClient) UpdateItem(ctx context.Context, in *UpdateItemRequest, opts ...grpc.CallOption) (*UpdateItemResponse, error) {
	out := new(UpdateItemResponse)
	err := c.cc.Invoke(ctx, "/protobuf.InventoryService/UpdateItem", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inventoryServiceClient) DeleteItem(ctx context.Context, in *DeleteItemRequest, opts ...grpc.CallOption) (*DeleteItemResponse, error) {
	out := new(DeleteItemResponse)
	err := c.cc.Invoke(ctx, "/protobuf.InventoryService/DeleteItem", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inventoryServiceClient) IncrementItemQuantity(ctx context.Context, in *IncrementItemQuantityRequest, opts ...grpc.CallOption) (*IncrementItemQuantityResponse, error) {
	out := new(IncrementItemQuantityResponse)
	err := c.cc.Invoke(ctx, "/protobuf.InventoryService/IncrementItemQuantity", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// InventoryServiceServer is the server API for InventoryService service.
// All implementations must embed UnimplementedInventoryServiceServer
// for forward compatibility
type InventoryServiceServer interface {
	GetInventory(*Empty, InventoryService_GetInventoryServer) error
	GetItem(context.Context, *GetItemRequest) (*GetItemResponse, error)
	FindItems(*FindItemsRequest, InventoryService_FindItemsServer) error
	InsertItem(context.Context, *InsertItemRequest) (*InsertItemResponse, error)
	UpdateItem(context.Context, *UpdateItemRequest) (*UpdateItemResponse, error)
	DeleteItem(context.Context, *DeleteItemRequest) (*DeleteItemResponse, error)
	IncrementItemQuantity(context.Context, *IncrementItemQuantityRequest) (*IncrementItemQuantityResponse, error)
	mustEmbedUnimplementedInventoryServiceServer()
}

// UnimplementedInventoryServiceServer must be embedded to have forward compatible implementations.
type UnimplementedInventoryServiceServer struct {
}

func (UnimplementedInventoryServiceServer) GetInventory(*Empty, InventoryService_GetInventoryServer) error {
	return status.Errorf(codes.Unimplemented, "method GetInventory not implemented")
}
func (UnimplementedInventoryServiceServer) GetItem(context.Context, *GetItemRequest) (*GetItemResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetItem not implemented")
}
func (UnimplementedInventoryServiceServer) FindItems(*FindItemsRequest, InventoryService_FindItemsServer) error {
	return status.Errorf(codes.Unimplemented, "method FindItems not implemented")
}
func (UnimplementedInventoryServiceServer) InsertItem(context.Context, *InsertItemRequest) (*InsertItemResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InsertItem not implemented")
}
func (UnimplementedInventoryServiceServer) UpdateItem(context.Context, *UpdateItemRequest) (*UpdateItemResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateItem not implemented")
}
func (UnimplementedInventoryServiceServer) DeleteItem(context.Context, *DeleteItemRequest) (*DeleteItemResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteItem not implemented")
}
func (UnimplementedInventoryServiceServer) IncrementItemQuantity(context.Context, *IncrementItemQuantityRequest) (*IncrementItemQuantityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IncrementItemQuantity not implemented")
}
func (UnimplementedInventoryServiceServer) mustEmbedUnimplementedInventoryServiceServer() {}

// UnsafeInventoryServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to InventoryServiceServer will
// result in compilation errors.
type UnsafeInventoryServiceServer interface {
	mustEmbedUnimplementedInventoryServiceServer()
}

func RegisterInventoryServiceServer(s grpc.ServiceRegistrar, srv InventoryServiceServer) {
	s.RegisterService(&InventoryService_ServiceDesc, srv)
}

func _InventoryService_GetInventory_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(InventoryServiceServer).GetInventory(m, &inventoryServiceGetInventoryServer{stream})
}

type InventoryService_GetInventoryServer interface {
	Send(*InventoryItem) error
	grpc.ServerStream
}

type inventoryServiceGetInventoryServer struct {
	grpc.ServerStream
}

func (x *inventoryServiceGetInventoryServer) Send(m *InventoryItem) error {
	return x.ServerStream.SendMsg(m)
}

func _InventoryService_GetItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetItemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InventoryServiceServer).GetItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protobuf.InventoryService/GetItem",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InventoryServiceServer).GetItem(ctx, req.(*GetItemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InventoryService_FindItems_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(FindItemsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(InventoryServiceServer).FindItems(m, &inventoryServiceFindItemsServer{stream})
}

type InventoryService_FindItemsServer interface {
	Send(*InventoryItem) error
	grpc.ServerStream
}

type inventoryServiceFindItemsServer struct {
	grpc.ServerStream
}

func (x *inventoryServiceFindItemsServer) Send(m *InventoryItem) error {
	return x.ServerStream.SendMsg(m)
}

func _InventoryService_InsertItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InsertItemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InventoryServiceServer).InsertItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protobuf.InventoryService/InsertItem",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InventoryServiceServer).InsertItem(ctx, req.(*InsertItemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InventoryService_UpdateItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateItemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InventoryServiceServer).UpdateItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protobuf.InventoryService/UpdateItem",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InventoryServiceServer).UpdateItem(ctx, req.(*UpdateItemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InventoryService_DeleteItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteItemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InventoryServiceServer).DeleteItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protobuf.InventoryService/DeleteItem",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InventoryServiceServer).DeleteItem(ctx, req.(*DeleteItemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InventoryService_IncrementItemQuantity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IncrementItemQuantityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InventoryServiceServer).IncrementItemQuantity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protobuf.InventoryService/IncrementItemQuantity",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InventoryServiceServer).IncrementItemQuantity(ctx, req.(*IncrementItemQuantityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// InventoryService_ServiceDesc is the grpc.ServiceDesc for InventoryService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var InventoryService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "protobuf.InventoryService",
	HandlerType: (*InventoryServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetItem",
			Handler:    _InventoryService_GetItem_Handler,
		},
		{
			MethodName: "InsertItem",
			Handler:    _InventoryService_InsertItem_Handler,
		},
		{
			MethodName: "UpdateItem",
			Handler:    _InventoryService_UpdateItem_Handler,
		},
		{
			MethodName: "DeleteItem",
			Handler:    _InventoryService_DeleteItem_Handler,
		},
		{
			MethodName: "IncrementItemQuantity",
			Handler:    _InventoryService_IncrementItemQuantity_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetInventory",
			Handler:       _InventoryService_GetInventory_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "FindItems",
			Handler:       _InventoryService_FindItems_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "inventory.proto",
}
